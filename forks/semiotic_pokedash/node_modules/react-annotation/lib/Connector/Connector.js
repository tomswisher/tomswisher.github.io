"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require("react");

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Connector = function (_React$Component) {
  _inherits(Connector, _React$Component);

  function Connector() {
    _classCallCheck(this, Connector);

    return _possibleConstructorReturn(this, (Connector.__proto__ || Object.getPrototypeOf(Connector)).apply(this, arguments));
  }

  _createClass(Connector, [{
    key: "getComponents",
    value: function getComponents() {}
  }, {
    key: "render",
    value: function render() {
      var _props = this.props,
          color = _props.color,
          dx = _props.dx,
          dy = _props.dy,
          customID = _props.customID;


      if (dx === 0 && dy === 0) {
        return _react2.default.createElement("g", { className: "annotation-connector" });
      }

      var d = this.getComponents(this.props) || [];
      var cleanedProps = Object.assign({}, this.props);
      delete cleanedProps.children;

      var childrenWithProps = _react2.default.Children.map(this.props.children, function (child) {
        return _react2.default.cloneElement(child, _extends({}, cleanedProps, child.props, {
          scale: cleanedProps.endScale || child.props.endScale,
          lineData: d.components[0].data
        }));
      });

      return _react2.default.createElement(
        "g",
        _extends({ className: "annotation-connector" }, this.props.gAttrs),
        d.components && d.components.map(function (c, i) {
          var attrs = {};
          if (!c) return null;
          Object.keys(c.attrs).forEach(function (k) {
            if (c.attrs[k] && k !== "text") {
              attrs[k.replace(/-([a-z])/g, function (g) {
                return g[1].toUpperCase();
              })] = c.attrs[k];
            }
          });
          return _react2.default.createElement(
            c.type,
            _extends({
              mask: customID ? "url(#" + customID + ")" : undefined,
              key: i,
              className: c.className,
              fill: "none",
              stroke: color
            }, attrs),
            c.attrs.text
          );
        }),
        childrenWithProps
      );
    }
  }]);

  return Connector;
}(_react2.default.Component);

exports.default = Connector;