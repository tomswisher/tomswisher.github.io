"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require("react");

var _react2 = _interopRequireDefault(_react);

var _endDot = require("viz-annotation/lib/Connector/end-dot");

var _endDot2 = _interopRequireDefault(_endDot);

var _ConnectorEnd2 = require("./ConnectorEnd");

var _ConnectorEnd3 = _interopRequireDefault(_ConnectorEnd2);

var _propTypes = require("prop-types");

var _propTypes2 = _interopRequireDefault(_propTypes);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /* eslint-disable no-unused-vars */

/* eslint-enable no-unused-vars */


var ConnectorEndDot = function (_ConnectorEnd) {
  _inherits(ConnectorEndDot, _ConnectorEnd);

  function ConnectorEndDot() {
    _classCallCheck(this, ConnectorEndDot);

    return _possibleConstructorReturn(this, (ConnectorEndDot.__proto__ || Object.getPrototypeOf(ConnectorEndDot)).apply(this, arguments));
  }

  _createClass(ConnectorEndDot, [{
    key: "getComponents",
    value: function getComponents(_ref) {
      var x = _ref.x,
          y = _ref.y,
          dy = _ref.dy,
          dx = _ref.dx,
          lineData = _ref.lineData,
          scale = _ref.scale;

      return (0, _endDot2.default)({ x: x, y: y, dx: dx, dy: dy, lineData: lineData, scale: scale });
    }
  }]);

  return ConnectorEndDot;
}(_ConnectorEnd3.default);

exports.default = ConnectorEndDot;


ConnectorEndDot.propTypes = {
  x: _propTypes2.default.number,
  y: _propTypes2.default.number,
  dx: _propTypes2.default.number,
  dy: _propTypes2.default.number,
  scale: _propTypes2.default.number,
  lineData: _propTypes2.default.array
  //array of arrays of x,y coordinates for the connector line
};