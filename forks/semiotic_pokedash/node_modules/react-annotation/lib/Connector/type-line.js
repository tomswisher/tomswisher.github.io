"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.lineSetup = undefined;

var _Builder = require("../Builder");

// export const lineSetup = ({ type, subjectType }) => {
var lineSetup = exports.lineSetup = function lineSetup(_ref) {
  var x = _ref.x,
      y = _ref.y,
      dx = _ref.dx,
      dy = _ref.dy,
      radius = _ref.radius,
      outerRadius = _ref.outerRadius,
      radiusPadding = _ref.radiusPadding,
      width = _ref.width,
      height = _ref.height;

  // let annotation = type.annotation
  // let offset = annotation.position

  var x1 = 0,
      //annotation.x - offset.x,
  x2 = dx,
      //x1 + annotation.dx,
  y1 = 0,
      //annotation.y - offset.y,
  y2 = dy; //y1 + annotation.dy

  // const subjectData = annotation.subject

  // if (
  //   subjectType === "circle" &&
  //   (subjectData.outerRadius || subjectData.radius)
  // ) {

  if (outerRadius || radius) {
    var h = Math.sqrt((x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2));
    var angle = Math.asin(-y2 / h);
    var r = (outerRadius || radius) + (radiusPadding || 0);

    x1 = Math.abs(Math.cos(angle) * r) * (x2 < 0 ? -1 : 1);
    y1 = Math.abs(Math.sin(angle) * r) * (y2 < 0 ? -1 : 1);
  }

  if (width && height) {
    // const { width, height } = subjectData

    if (width > 0 && dx > 0 || width < 0 && dx < 0) {
      if (Math.abs(width) > Math.abs(dx)) x1 = width / 2;else x1 = width;
    }
    if (height > 0 && dy > 0 || height < 0 && dy < 0) {
      if (Math.abs(height) > Math.abs(dy)) y1 = height / 2;else y1 = height;
    }
    if (x1 === width / 2 && y1 === height / 2) {
      x1 = x2;
      y1 = y2;
    }
  }

  return [[x1, y1], [x2, y2]];
};

exports.default = function (connectorData) {
  var data = lineSetup(connectorData);
  return { components: [(0, _Builder.lineBuilder)({ data: data, className: "connector" })] };
};