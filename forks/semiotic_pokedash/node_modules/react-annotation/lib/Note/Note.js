"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require("react");

var _react2 = _interopRequireDefault(_react);

var _alignment4 = require("viz-annotation/lib/Note/alignment");

var _alignment5 = _interopRequireDefault(_alignment4);

var _Handle = require("../Handle");

var _Handle2 = _interopRequireDefault(_Handle);

var _lineTypeVertical = require("viz-annotation/lib/Note/lineType-vertical");

var _lineTypeVertical2 = _interopRequireDefault(_lineTypeVertical);

var _lineTypeHorizontal = require("viz-annotation/lib/Note/lineType-horizontal");

var _lineTypeHorizontal2 = _interopRequireDefault(_lineTypeHorizontal);

var _propTypes = require("prop-types");

var _propTypes2 = _interopRequireDefault(_propTypes);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var getOuterBBox = function getOuterBBox() {
  for (var _len = arguments.length, domNodes = Array(_len), _key = 0; _key < _len; _key++) {
    domNodes[_key] = arguments[_key];
  }

  return [].concat(domNodes).reduce(function (p, c) {
    if (c) {
      var bbox = c.getBBox();
      p.x = Math.min(p.x, bbox.x);
      p.y = Math.min(p.y, bbox.y);
      p.width = Math.max(p.width, bbox.width);

      var yOffset = c && c.attributes && c.attributes.y;
      p.height = Math.max(p.height, (yOffset && parseFloat(yOffset.value) || 0) + bbox.height);
    }
    return p;
  }, { x: 0, y: 0, width: 0, height: 0 });
};

var Note = function (_React$Component) {
  _inherits(Note, _React$Component);

  function Note(props) {
    _classCallCheck(this, Note);

    var _this = _possibleConstructorReturn(this, (Note.__proto__ || Object.getPrototypeOf(Note)).call(this, props));

    _this.state = {
      translateX: 0,
      translateY: 0,
      labelOffset: 0,
      changed: 0,
      bbox: { width: 0, height: 0, x: 0, y: 0 }
    };


    _this.updateText = _this.updateText.bind(_this);
    return _this;
  }

  _createClass(Note, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      this.updateText(this.props);
    }
  }, {
    key: "componentWillReceiveProps",
    value: function componentWillReceiveProps(nextProps) {
      if (nextProps.title !== this.props.title || nextProps.label !== this.props.label || nextProps.wrap !== this.props.wrap) {
        this.updateText(nextProps);
      }
      if (nextProps.editMode && (nextProps.align === "dynamic" || !nextProps.align)) {
        this.updateText(nextProps);
      }
    }
  }, {
    key: "updateText",
    value: function updateText(_ref) {
      var _this2 = this;

      var orientation = _ref.orientation,
          padding = _ref.padding,
          align = _ref.align,
          lineType = _ref.lineType,
          label = _ref.label,
          title = _ref.title,
          wrap = _ref.wrap,
          wrapSplitter = _ref.wrapSplitter,
          dx = _ref.dx,
          dy = _ref.dy;

      var newState = {
        titleWrapped: null,
        labelWrapped: null
      };
      newState.changed = this.state.changed + 1;

      if (title) {
        newState.titleWrapped = this.refs.title && this.wrapText(this.refs.title, newState.changed, title, wrap, wrapSplitter);
      }
      if (label) newState.labelWrapped = this.refs.label && this.wrapText(this.refs.label, newState.changed, label, wrap, wrapSplitter);

      this.setState(newState, function () {
        var setLabel = function setLabel() {
          var bbox = getOuterBBox(_this2.refs.title, _this2.refs.label);
          var noteParams = {
            padding: padding,
            bbox: bbox,
            offset: { x: dx, y: dy },
            orientation: orientation,
            align: align
          };
          if (lineType === "vertical") noteParams.orientation = "leftRight";else if (lineType === "horizontal") noteParams.orientation = "topBottom";

          var _alignment = (0, _alignment5.default)(noteParams),
              x = _alignment.x,
              y = _alignment.y;

          _this2.setState({
            translateX: x,
            translateY: y,
            bbox: bbox
          });
        };

        _this2.setState({
          labelOffset: title && _this2.refs.title.getBBox().height || 0
        }, setLabel);
      });
    }
  }, {
    key: "wrapText",
    value: function wrapText(textRef, key, text, width, wrapSplitter) {
      var initialAttrs = {
        x: 0,
        dy: "1.2em"
      };

      var words = text.split(wrapSplitter || /[ \t\r\n]+/).reverse().filter(function (w) {
        return w !== "";
      });

      var word = void 0,
          line = [];

      var tspans = [];

      while (word = words.pop()) {
        line.push(word);
        textRef.lastChild.textContent = line.join(" ");

        var length = textRef.lastChild.getComputedTextLength();

        textRef.lastChild.textContent = "";

        if (length > width && line.length > 1) {
          line.pop();
          tspans.push(_react2.default.createElement(
            "tspan",
            _extends({ key: tspans.length + text }, initialAttrs),
            line.join(" ")
          ));
          line = [word];
        }
      }

      if (line.length !== 0) {
        tspans.push(_react2.default.createElement(
          "tspan",
          _extends({ key: tspans.length + text }, initialAttrs),
          line.join(" ")
        ));
      }

      return _react2.default.createElement(
        "tspan",
        _extends({}, initialAttrs, { key: key + text }),
        tspans
      );
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps) {
      var _props = this.props,
          orientation = _props.orientation,
          padding = _props.padding,
          align = _props.align,
          dx = _props.dx,
          dy = _props.dy,
          lineType = _props.lineType;


      if (this.state.bbox.width && (prevProps.dx !== this.props.dx || prevProps.dy !== this.props.dy) && (this.refs.title || this.refs.label)) {
        var bbox = getOuterBBox(this.refs.title, this.refs.label);
        var noteParams = {
          padding: padding,
          bbox: bbox,
          offset: { x: dx, y: dy },
          orientation: orientation,
          align: align
        };

        if (lineType === "vertical") noteParams.orientation = "leftRight";else if (lineType === "horizontal") noteParams.orientation = "topBottom";

        var _alignment2 = (0, _alignment5.default)(noteParams),
            x = _alignment2.x,
            y = _alignment2.y;

        var updates = { bbox: bbox };
        if (this.state.translateX !== x) updates.translateX = x;
        if (this.state.translateY !== y) updates.translateY = y;
        if (updates.translateX !== undefined || updates.translateY !== undefined) {
          this.setState(updates);
        }
      } else if (this.state.align !== prevProps.align || this.props.orientation !== prevProps.orientation || this.props.padding !== prevProps.padding) {
        var _noteParams = {
          padding: padding,
          bbox: this.state.bbox,
          offset: { x: dx, y: dy },
          orientation: orientation,
          align: align
        };

        if (lineType === "vertical") _noteParams.orientation = "leftRight";else if (lineType === "horizontal") _noteParams.orientation = "topBottom";

        var _alignment3 = (0, _alignment5.default)(_noteParams),
            _x = _alignment3.x,
            _y = _alignment3.y;

        var _updates = {};
        if (this.state.translateX !== _x) _updates.translateX = _x;
        if (this.state.translateY !== _y) _updates.translateY = _y;
        if (_updates.translateX !== undefined || _updates.translateY !== undefined) {
          this.setState(_updates);
        }
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _props2 = this.props,
          dx = _props2.dx,
          dy = _props2.dy,
          title = _props2.title,
          label = _props2.label,
          align = _props2.align,
          editMode = _props2.editMode,
          lineType = _props2.lineType,
          color = _props2.color,
          titleColor = _props2.titleColor,
          labelColor = _props2.labelColor;


      var noteTitle = void 0,
          noteText = void 0,
          noteLineType = void 0;
      if (title) {
        noteTitle = _react2.default.createElement(
          "text",
          {
            ref: "title",
            className: "annotation-note-title",
            fontWeight: "bold",
            key: "title",
            fill: titleColor || color
          },
          this.state.titleWrapped || _react2.default.createElement(
            "tspan",
            { x: 0, dy: ".8em" },
            title
          )
        );
      }

      if (label) {
        noteText = _react2.default.createElement(
          "text",
          {
            ref: "label",
            className: "annotation-note-label",
            y: this.state.labelOffset * 1.1,
            key: "label",
            fill: labelColor || color
          },
          this.state.labelWrapped || _react2.default.createElement(
            "tspan",
            { x: 0, dy: ".8em" },
            label
          )
        );
      }

      if (lineType && this.state.bbox.width) {
        var noteParams = {
          bbox: this.state.bbox,
          align: align,
          offset: { x: dx, y: dy }
        };

        var noteComponent = (lineType === "vertical" && (0, _lineTypeVertical2.default)(noteParams) || lineType === "horizontal" && (0, _lineTypeHorizontal2.default)(noteParams)).components[0];

        noteLineType = _react2.default.createElement(noteComponent.type, _extends({
          className: noteComponent.className
        }, noteComponent.attrs, {
          stroke: color
        }));
      }

      var handle = void 0;

      if (editMode) {
        handle = _react2.default.createElement(_Handle2.default, {
          handleStart: this.props.dragStart,
          handleStop: this.props.dragEnd,
          handleDrag: this.props.dragNote
        });
      }

      return _react2.default.createElement(
        "g",
        _extends({
          transform: "translate(" + dx + ", " + dy + ")",
          className: "annotation-note"
        }, this.props.gProps),
        _react2.default.createElement(
          "g",
          {
            className: "annotation-note-content",
            transform: "translate(" + this.state.translateX + ",\n          " + this.state.translateY + ")",
            ref: "note"
          },
          _react2.default.createElement("rect", {
            className: "annotation-note-bg",
            width: this.state.bbox.width,
            height: this.state.bbox.height,
            stroke: "none",
            fill: "white",
            fillOpacity: "0"
          }),
          noteTitle,
          noteText
        ),
        noteLineType,
        handle
      );
    }
  }]);

  return Note;
}(_react2.default.Component);

exports.default = Note;


Note.defaultProps = {
  wrap: 120,
  align: "dynamic",
  orientation: "topBottom",
  padding: 3
};

Note.propTypes = {
  dx: _propTypes2.default.number,
  dy: _propTypes2.default.number,
  title: _propTypes2.default.string,
  label: _propTypes2.default.string,
  orientation: _propTypes2.default.oneOf(["leftRight", "topBottom"]),
  padding: _propTypes2.default.number,
  align: _propTypes2.default.oneOf(["left", "right", "middle", "top", "bottom", "dynamic"]),
  editMode: _propTypes2.default.bool,
  lineType: _propTypes2.default.oneOf(["vertical", "horizontal"]),
  color: _propTypes2.default.string,
  titleColor: _propTypes2.default.string,
  labelColor: _propTypes2.default.string
};