"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require("react");

var _react2 = _interopRequireDefault(_react);

var _Annotation = require("./Annotation");

var _Annotation2 = _interopRequireDefault(_Annotation);

var _classnames = require("classnames");

var _classnames2 = _interopRequireDefault(_classnames);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var EditableAnnotation = function (_React$Component) {
  _inherits(EditableAnnotation, _React$Component);

  function EditableAnnotation() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, EditableAnnotation);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = EditableAnnotation.__proto__ || Object.getPrototypeOf(EditableAnnotation)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
      x: 0,
      y: 0,
      dx: 0,
      dy: 0
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(EditableAnnotation, [{
    key: "componentWillMount",
    value: function componentWillMount() {
      this.setState({
        x: this.props.x,
        y: this.props.y,
        dx: this.props.dx,
        dy: this.props.dy
      });
    }
  }, {
    key: "getData",
    value: function getData() {
      return Object.assign({}, this.props, this.state);
    }
  }, {
    key: "dragEnd",
    value: function dragEnd() {
      if (this.props.onDragEnd) {
        this.props.onDragEnd(this.getData());
      }
    }
  }, {
    key: "dragStart",
    value: function dragStart() {
      if (this.props.onDragStart) {
        this.props.onDragStart(this.getData());
      }
    }
  }, {
    key: "dragSubject",
    value: function dragSubject(event, data) {
      var _this2 = this;

      this.setState({
        x: this.state.x + data.deltaX,
        y: this.state.y + data.deltaY
      }, function () {
        if (_this2.props.onDrag) _this2.props.onDrag(_this2.getData());
      });
    }
  }, {
    key: "dragSubjectSettings",
    value: function dragSubjectSettings(event, data) {
      var _this3 = this;

      this.setState(data, function () {
        if (_this3.props.onDrag) _this3.props.onDrag(_this3.getData());
      });
    }
  }, {
    key: "dragNote",
    value: function dragNote(event, data) {
      var _this4 = this;

      this.setState({
        dx: this.state.dx + data.deltaX,
        dy: this.state.dy + data.deltaY
      }, function () {
        if (_this4.props.onDrag) _this4.props.onDrag(_this4.getData());
      });
    }
  }, {
    key: "render",
    value: function render() {
      var cleanedProps = Object.assign({}, this.props, _extends({}, this.state, {
        dragSubject: this.dragSubject.bind(this),
        dragNote: this.dragNote.bind(this),
        dragSubjectSettings: this.dragSubjectSettings.bind(this),
        dragEnd: this.dragEnd.bind(this),
        dragStart: this.dragStart.bind(this),
        editMode: true,
        className: (0, _classnames2.default)(this.props.className, "editable")
      }));

      return _react2.default.createElement(_Annotation2.default, cleanedProps);
    }
  }]);

  return EditableAnnotation;
}(_react2.default.Component);

exports.default = EditableAnnotation;