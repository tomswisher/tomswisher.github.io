"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.circleHandles = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; // import { circleHandles } from "../Handles"


var _Builder = require("../Builder");

// import { event } from "d3-selection"

var circleHandles = exports.circleHandles = function circleHandles(_ref) {
  var _ref$cx = _ref.cx,
      cx = _ref$cx === undefined ? 0 : _ref$cx,
      _ref$cy = _ref.cy,
      cy = _ref$cy === undefined ? 0 : _ref$cy,
      r1 = _ref.r1,
      r2 = _ref.r2,
      padding = _ref.padding;

  var h = { move: { x: cx, y: cy } };

  if (r1 !== undefined) {
    h.r1 = { x: cx + r1 / Math.sqrt(2), y: cy + r1 / Math.sqrt(2) };
  }

  if (r2 !== undefined) {
    h.r2 = { x: cx + r2 / Math.sqrt(2), y: cy + r2 / Math.sqrt(2) };
  }

  if (padding !== undefined) {
    h.padding = { x: cx + r1 + padding, y: cy };
  }

  return h;
};

exports.default = function (_ref2) {
  var radius = _ref2.radius,
      radiusPadding = _ref2.radiusPadding,
      outerRadius = _ref2.outerRadius,
      innerRadius = _ref2.innerRadius,
      editMode = _ref2.editMode,
      type = _ref2.type;

  // if (!subjectData.radius && !subjectData.outerRadius) {
  //   subjectData.radius = 20
  // }

  var handles = [];
  var c = (0, _Builder.arcBuilder)({
    data: { radius: radius, outerRadius: outerRadius, innerRadius: innerRadius },
    className: "subject"
  });

  if (editMode) {
    var h = circleHandles({
      r1: c.data.outerRadius || c.data.radius,
      r2: c.data.innerRadius,
      padding: radiusPadding
    });

    var updateRadius = function updateRadius(attr) {
      // const r = subjectData[attr] + event.dx * Math.sqrt(2)
      // subjectData[attr] = r
      // type.redrawSubject()
      // type.redrawConnector()
    };

    var cHandles = [_extends({}, h.r1)];

    if (innerRadius) {
      cHandles.push(_extends({}, h.r2, { drag: updateRadius.bind(type, "innerRadius") }));
    }
    handles = cHandles;
    // handles = type.mapHandles(cHandles)
  }

  c.attrs["fill-opacity"] = 0;

  return { components: [c], handles: handles };
};