"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require("react");

var _react2 = _interopRequireDefault(_react);

var _Subject2 = require("./Subject");

var _Subject3 = _interopRequireDefault(_Subject2);

var _propTypes = require("prop-types");

var _propTypes2 = _interopRequireDefault(_propTypes);

var _Handle = require("../Handle");

var _Handle2 = _interopRequireDefault(_Handle);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /* eslint-disable no-unused-vars */

/* eslint-enable no-unused-vars */
// import Bracket from "./bracket"


var SubjectCustom = function (_Subject) {
  _inherits(SubjectCustom, _Subject);

  function SubjectCustom() {
    _classCallCheck(this, SubjectCustom);

    return _possibleConstructorReturn(this, (SubjectCustom.__proto__ || Object.getPrototypeOf(SubjectCustom)).apply(this, arguments));
  }

  _createClass(SubjectCustom, [{
    key: "render",
    value: function render() {
      var _props = this.props,
          _props$custom = _props.custom,
          custom = _props$custom === undefined ? "M0,0" : _props$custom,
          customID = _props.customID,
          editMode = _props.editMode,
          transform = _props.transform;


      var handles = void 0;
      if (editMode) {
        handles = _react2.default.createElement(_Handle2.default, {
          handleStart: this.props.onDragStart,
          handleStop: this.props.onDragEnd,
          handleDrag: this.props.dragSubject
        });
      }

      return _react2.default.createElement(
        "g",
        { className: "annotation-subject" },
        _react2.default.createElement(
          "g",
          { transform: transform },
          typeof custom === "string" ? _react2.default.createElement("path", { d: custom, pointerEvents: "none" }) : _react2.default.createElement(
            "g",
            { pointerEvents: "none" },
            custom
          ),
          _react2.default.createElement(
            "mask",
            { id: customID, pointerEvents: "none" },
            _react2.default.createElement(
              "g",
              { transform: transform },
              _react2.default.createElement("rect", {
                x: "-100%",
                y: "-100%",
                height: "200%",
                width: "200%",
                fill: "white",
                pointerEvents: "none"
              }),
              typeof custom === "string" ? _react2.default.createElement("path", { d: custom, fill: "black", pointerEvents: "none" }) : _react2.default.createElement(
                "g",
                { fill: "black", pointerEvents: "none" },
                custom.map(function (c, i) {
                  return _react2.default.cloneElement(c, Object.assign({}, c.props, {
                    fill: "black",
                    opacity: 1,
                    key: "customSubject-" + i
                  }));
                })
              ),
              "}"
            )
          )
        ),
        handles
      );
    }
  }]);

  return SubjectCustom;
}(_Subject3.default);

exports.default = SubjectCustom;


SubjectCustom.propTypes = {
  editMode: _propTypes2.default.bool
};