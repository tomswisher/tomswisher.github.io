"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

exports.AnnotationLabel = AnnotationLabel;
exports.AnnotationCallout = AnnotationCallout;
exports.AnnotationCalloutElbow = AnnotationCalloutElbow;
exports.AnnotationCalloutCurve = AnnotationCalloutCurve;
exports.AnnotationCalloutCircle = AnnotationCalloutCircle;
exports.AnnotationCalloutRect = AnnotationCalloutRect;
exports.AnnotationXYThreshold = AnnotationXYThreshold;
exports.AnnotationBadge = AnnotationBadge;
exports.AnnotationBracket = AnnotationBracket;
exports.AnnotationCalloutCustom = AnnotationCalloutCustom;

var _react = require("react");

var _react2 = _interopRequireDefault(_react);

var _Annotation = require("./Annotation");

var _Annotation2 = _interopRequireDefault(_Annotation);

var _EditableAnnotation = require("./EditableAnnotation");

var _EditableAnnotation2 = _interopRequireDefault(_EditableAnnotation);

var _ConnectorLine = require("./Connector/ConnectorLine");

var _ConnectorLine2 = _interopRequireDefault(_ConnectorLine);

var _ConnectorElbow = require("./Connector/ConnectorElbow");

var _ConnectorElbow2 = _interopRequireDefault(_ConnectorElbow);

var _ConnectorCurve = require("./Connector/ConnectorCurve");

var _ConnectorCurve2 = _interopRequireDefault(_ConnectorCurve);

var _ConnectorEndDot = require("./Connector/ConnectorEndDot");

var _ConnectorEndDot2 = _interopRequireDefault(_ConnectorEndDot);

var _ConnectorEndArrow = require("./Connector/ConnectorEndArrow");

var _ConnectorEndArrow2 = _interopRequireDefault(_ConnectorEndArrow);

var _Subject = require("./Subject/Subject");

var _Subject2 = _interopRequireDefault(_Subject);

var _SubjectCircle = require("./Subject/SubjectCircle");

var _SubjectCircle2 = _interopRequireDefault(_SubjectCircle);

var _SubjectBadge = require("./Subject/SubjectBadge");

var _SubjectBadge2 = _interopRequireDefault(_SubjectBadge);

var _SubjectBracket = require("./Subject/SubjectBracket");

var _SubjectBracket2 = _interopRequireDefault(_SubjectBracket);

var _BracketNote = require("./Note/BracketNote");

var _BracketNote2 = _interopRequireDefault(_BracketNote);

var _SubjectRect = require("./Subject/SubjectRect");

var _SubjectRect2 = _interopRequireDefault(_SubjectRect);

var _SubjectThreshold = require("./Subject/SubjectThreshold");

var _SubjectThreshold2 = _interopRequireDefault(_SubjectThreshold);

var _SubjectCustom = require("./Subject/SubjectCustom");

var _SubjectCustom2 = _interopRequireDefault(_SubjectCustom);

var _Note = require("./Note/Note");

var _Note2 = _interopRequireDefault(_Note);

var _classnames = require("classnames");

var _classnames2 = _interopRequireDefault(_classnames);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var getAnnotationType = function getAnnotationType(editMode) {
  return editMode ? _EditableAnnotation2.default : _Annotation2.default;
};

var annotationMapper = function annotationMapper(props, Connector) {
  var NoteDefaultProps = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  var Subject = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : _Subject2.default;
  var SubjectDefaultProps = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};
  var NoteType = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : _Note2.default;
  var _props$disable = props.disable,
      disable = _props$disable === undefined ? [] : _props$disable,
      connector = props.connector,
      note = props.note,
      subject = props.subject,
      x = props.x,
      y = props.y,
      dx = props.dx,
      dy = props.dy,
      nx = props.nx,
      ny = props.ny,
      color = props.color,
      className = props.className,
      onDrag = props.onDrag,
      onDragStart = props.onDragStart,
      onDragEnd = props.onDragEnd,
      editMode = props.editMode,
      events = props.events;

  var CONNECTORS = {
    type: {
      curve: _ConnectorCurve2.default,
      line: _ConnectorLine2.default,
      elbow: _ConnectorElbow2.default
    },
    end: {
      dot: _ConnectorEndDot2.default,
      arrow: _ConnectorEndArrow2.default
    }
  };

  var ConnectorType = void 0,
      ConnectorEndType = void 0;
  if (disable.indexOf("connector") === -1) {
    ConnectorType = connector && CONNECTORS.type[connector.type] || Connector;
    ConnectorEndType = connector && CONNECTORS.end[connector.end];
  }

  var AnnotationType = getAnnotationType(props.editMode);
  return _react2.default.createElement(
    AnnotationType,
    _extends({
      x: x,
      y: y,
      dx: dx,
      dy: dy,
      nx: nx,
      ny: ny,
      color: color,
      className: className,
      onDrag: onDrag,
      onDragStart: onDragStart,
      onDragEnd: onDragEnd,
      editMode: editMode
    }, SubjectDefaultProps, subject, {
      events: events
    }),
    ConnectorType && _react2.default.createElement(
      ConnectorType,
      connector,
      ConnectorEndType && _react2.default.createElement(ConnectorEndType, null)
    ),
    Subject && disable.indexOf("subject") === -1 && _react2.default.createElement(Subject, null),
    note && disable.indexOf("note") === -1 && _react2.default.createElement(NoteType, _extends({}, NoteDefaultProps, note))
  );
};

function AnnotationLabel(props) {
  var className = (0, _classnames2.default)("label", props.className);
  return annotationMapper(_extends({}, props, { className: className }), _ConnectorLine2.default, {
    align: "middle"
  });
}

function AnnotationCallout(props) {
  var className = (0, _classnames2.default)("callout", props.className);
  return annotationMapper(_extends({}, props, { className: className }), _ConnectorLine2.default, {
    lineType: "horizontal"
  });
}

function AnnotationCalloutElbow(props) {
  var className = (0, _classnames2.default)("callout elbow", props.className);
  return annotationMapper(_extends({}, props, { className: className }), _ConnectorElbow2.default, {
    lineType: "horizontal"
  });
}

function AnnotationCalloutCurve(props) {
  var className = (0, _classnames2.default)("callout curve", props.className);
  return annotationMapper(_extends({}, props, { className: className }), _ConnectorCurve2.default, {
    lineType: "horizontal"
  });
}

function AnnotationCalloutCircle(props) {
  var className = (0, _classnames2.default)("callout circle", props.className);
  return annotationMapper(_extends({}, props, { className: className }), _ConnectorElbow2.default, { lineType: "horizontal" }, _SubjectCircle2.default, { radius: 20 });
}

function AnnotationCalloutRect(props) {
  var className = (0, _classnames2.default)("callout rect", props.className);
  return annotationMapper(_extends({}, props, { className: className }), _ConnectorElbow2.default, { lineType: "horizontal" }, _SubjectRect2.default, { width: 100, height: 100 });
}

function AnnotationXYThreshold(props) {
  var className = (0, _classnames2.default)("callout xythreshold", props.className);
  return annotationMapper(_extends({}, props, { className: className }), _ConnectorElbow2.default, { lineType: "horizontal" }, _SubjectThreshold2.default);
}

function AnnotationBadge(props) {
  var className = (0, _classnames2.default)("badge", props.className);
  return annotationMapper(_extends({ disable: ["connector", "note"] }, props, { className: className }), null, null, _SubjectBadge2.default);
}

function AnnotationBracket(props) {
  var className = (0, _classnames2.default)("bracket", props.className);
  return annotationMapper(_extends({ disable: ["connector"] }, props, { className: className }), null, null, _SubjectBracket2.default, { depth: 20 }, _BracketNote2.default);
}

function AnnotationCalloutCustom(props) {
  var className = (0, _classnames2.default)("callout custom", props.className);
  return annotationMapper(_extends({}, props, { className: className }), _ConnectorElbow2.default, { lineType: "horizontal" }, _SubjectCustom2.default);
}