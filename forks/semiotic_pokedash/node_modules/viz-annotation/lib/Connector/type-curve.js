"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _Builder = require("../Builder");

var _typeLine = require("./type-line");

var _d3Shape = require("d3-shape");

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

var createPoints = function createPoints(offset) {
  var anchors = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 2;

  var diff = { x: offset.x / (anchors + 1), y: offset.y / (anchors + 1) };
  var p = [];

  var i = 1;
  for (; i <= anchors; i++) {
    p.push([diff.x * i + i % 2 * 20, diff.y * i - i % 2 * 20]);
  }
  return p;
};

exports.default = function (_ref) {
  var curve = _ref.curve,
      points = _ref.points,
      x = _ref.x,
      y = _ref.y,
      dx = _ref.dx,
      dy = _ref.dy,
      radius = _ref.radius,
      outerRadius = _ref.outerRadius,
      width = _ref.width,
      height = _ref.height;

  if (!points || typeof points === "number") {
    points = createPoints({ x: dx, y: dy }, points);
  }
  if (!curve) {
    curve = _d3Shape.curveCatmullRom;
  }

  var handles = [];

  // if (type.editMode) {
  //   const cHandles = connectorData.points.map((c, i) => ({
  //     ...pointHandle({ cx: c[0], cy: c[1] }),
  //     index: i
  //   }))

  //   const updatePoint = index => {
  //     connectorData.points[index][0] += event.dx
  //     connectorData.points[index][1] += event.dy
  //     type.redrawConnector()
  //   }

  //   handles = type.mapHandles(
  //     cHandles.map(h => ({ ...h.move, drag: updatePoint.bind(type, h.index) }))
  //   )
  // }

  // let data = lineSetup({ type, subjectType })
  var data = (0, _typeLine.lineSetup)({ x: x, y: y, dx: dx, dy: dy, radius: radius, outerRadius: outerRadius, width: width, height: height });
  data = [data[0]].concat(_toConsumableArray(points), [data[1]]);
  var components = [(0, _Builder.lineBuilder)({ data: data, curve: curve, className: "connector" })];

  return { components: components, handles: handles };
};