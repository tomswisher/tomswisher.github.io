"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.axisLines = exports.axisLabels = undefined;

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

exports.axisPieces = axisPieces;

var _react = require("react");

var _react2 = _interopRequireDefault(_react);

var _semioticMark = require("semiotic-mark");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var defaultTickLineGenerator = function defaultTickLineGenerator(_ref) {
  var xy = _ref.xy,
      orient = _ref.orient,
      i = _ref.i;
  return _react2.default.createElement(_semioticMark.Mark, {
    key: i,
    markType: "path",
    renderMode: xy.renderMode,
    stroke: "black",
    strokeWidth: "1px",
    simpleInterpolate: true,
    d: "M" + xy.x1 + "," + xy.y1 + "L" + xy.x2 + "," + xy.y2,
    className: "tick-line tick " + orient
  });
};

function axisPieces(_ref2) {
  var _ref2$renderMode = _ref2.renderMode,
      renderMode = _ref2$renderMode === undefined ? function () {
    return undefined;
  } : _ref2$renderMode,
      _ref2$padding = _ref2.padding,
      padding = _ref2$padding === undefined ? 5 : _ref2$padding,
      tickValues = _ref2.tickValues,
      scale = _ref2.scale,
      ticks = _ref2.ticks,
      _ref2$orient = _ref2.orient,
      orient = _ref2$orient === undefined ? "left" : _ref2$orient,
      size = _ref2.size,
      _ref2$footer = _ref2.footer,
      footer = _ref2$footer === undefined ? false : _ref2$footer,
      _ref2$tickSize = _ref2.tickSize,
      tickSize = _ref2$tickSize === undefined ? footer ? -10 : ["top", "bottom"].find(function (d) {
    return d === orient;
  }) ? size[1] : size[0] : _ref2$tickSize;

  //returns x1 (start of line), x2 (end of line) associated with the value of the tick
  var axisDomain = [],
      position1 = void 0,
      position2 = void 0,
      domain1 = void 0,
      domain2 = void 0,
      tposition1 = void 0,
      tposition2 = void 0,
      textPositionMod = 0,
      textPositionMod2 = 0,
      defaultAnchor = "middle";

  switch (orient) {
    case "top":
      position1 = "x1";
      position2 = "x2";
      domain1 = "y1";
      domain2 = "y2";
      axisDomain = [0, tickSize];
      tposition1 = "tx";
      tposition2 = "ty";
      textPositionMod -= 20 - padding;
      break;
    case "bottom":
      position1 = "x1";
      position2 = "x2";
      domain1 = "y2";
      domain2 = "y1";
      axisDomain = [size[1], size[1] - tickSize];
      tposition1 = "tx";
      tposition2 = "ty";
      textPositionMod += 20 + padding;
      break;
    case "right":
      position1 = "y2";
      position2 = "y1";
      domain1 = "x2";
      domain2 = "x1";
      axisDomain = [size[0], size[0] - tickSize];
      tposition1 = "ty";
      tposition2 = "tx";
      textPositionMod += 5 + padding;
      textPositionMod2 += 5;
      defaultAnchor = "start";
      break;
    //left
    default:
      position1 = "y1";
      position2 = "y2";
      domain1 = "x1";
      domain2 = "x2";
      axisDomain = [0, tickSize];
      tposition1 = "ty";
      tposition2 = "tx";
      textPositionMod -= 5 + padding;
      textPositionMod2 += 5;
      defaultAnchor = "end";
      break;
  }

  var axisSize = Math.abs(scale.range()[1] - scale.range()[0]);

  if (!tickValues) {
    if (!ticks) {
      ticks = Math.max(1, parseInt(axisSize / 40, 10));
    }
    tickValues = scale.ticks(ticks);
  }

  return tickValues.map(function (tick, i) {
    var _ref3;

    var tickPosition = scale(tick);
    return _ref3 = {}, _defineProperty(_ref3, position1, tickPosition), _defineProperty(_ref3, position2, tickPosition), _defineProperty(_ref3, domain1, axisDomain[0]), _defineProperty(_ref3, domain2, axisDomain[1]), _defineProperty(_ref3, tposition1, tickPosition + textPositionMod2), _defineProperty(_ref3, tposition2, axisDomain[0] + textPositionMod), _defineProperty(_ref3, "defaultAnchor", defaultAnchor), _defineProperty(_ref3, "renderMode", renderMode(tick, i)), _defineProperty(_ref3, "value", tick), _ref3;
  });
}

var axisLabels = exports.axisLabels = function axisLabels(_ref4) {
  var axisParts = _ref4.axisParts,
      tickFormat = _ref4.tickFormat,
      _ref4$rotate = _ref4.rotate,
      rotate = _ref4$rotate === undefined ? 0 : _ref4$rotate;

  return axisParts.map(function (axisPart, i) {
    var renderedValue = tickFormat(axisPart.value);
    if ((typeof renderedValue === "undefined" ? "undefined" : _typeof(renderedValue)) !== "object" || renderedValue instanceof Date) {
      renderedValue = _react2.default.createElement(
        "text",
        { textAnchor: axisPart.defaultAnchor },
        renderedValue.toString ? renderedValue.toString() : renderedValue
      );
    }

    return _react2.default.createElement(
      "g",
      {
        key: i,
        pointerEvents: "none",
        transform: "translate(" + axisPart.tx + "," + axisPart.ty + ")rotate(" + rotate + ")"
      },
      renderedValue
    );
  });
};

var axisLines = exports.axisLines = function axisLines(_ref5) {
  var axisParts = _ref5.axisParts,
      orient = _ref5.orient,
      _ref5$tickLineGenerat = _ref5.tickLineGenerator,
      tickLineGenerator = _ref5$tickLineGenerat === undefined ? defaultTickLineGenerator : _ref5$tickLineGenerat;

  return axisParts.map(function (axisPart, i) {
    return tickLineGenerator({ xy: axisPart, orient: orient, i: i });
  });
};