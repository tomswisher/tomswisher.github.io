"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _class, _temp;
//import ReactDOM from 'react-dom'

//import MarkContext from './MarkContext'


//import Rx from 'rxjs/Rx'

var _react = require("react");

var _react2 = _interopRequireDefault(_react);

var _SvgHelper = require("./svg/SvgHelper");

var _propTypes = require("prop-types");

var _propTypes2 = _interopRequireDefault(_propTypes);

var _basicCanvasEffects = require("./canvas/basicCanvasEffects");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var VisualizationLayer = (_temp = _class = function (_React$PureComponent) {
  _inherits(VisualizationLayer, _React$PureComponent);

  function VisualizationLayer(props) {
    _classCallCheck(this, VisualizationLayer);

    var _this = _possibleConstructorReturn(this, (VisualizationLayer.__proto__ || Object.getPrototypeOf(VisualizationLayer)).call(this, props));

    _this.canvasDrawing = [];
    _this.state = {
      canvasDrawing: [],
      dataVersion: "",
      renderedElements: []
    };

    _this.updateVisualizationLayer = _this.updateVisualizationLayer.bind(_this);
    return _this;
  }

  _createClass(VisualizationLayer, [{
    key: "componentDidUpdate",
    value: function componentDidUpdate() {
      var _this2 = this;

      if (this.props.disableContext || !this.props.canvasContext || !this.canvasDrawing) return;

      var size = [this.props.size[0] + this.props.margin.left + this.props.margin.right, this.props.size[1] + this.props.margin.top + this.props.margin.bottom];

      var context = this.props.canvasContext.getContext("2d");
      context.setTransform(1, 0, 0, 1, this.props.margin.left, this.props.margin.top);
      context.clearRect(0, 0, size[0], size[1]);

      this.canvasDrawing.forEach(function (piece) {
        var style = piece.styleFn ? piece.styleFn(piece.d, piece.i) : { fill: "black", stroke: "black" };
        var fill = style.fill ? style.fill : "black";
        var stroke = style.stroke ? style.stroke : "black";
        fill = !style.fillOpacity ? fill : "rgba(" + [].concat(_toConsumableArray((0, _SvgHelper.hexToRgb)(fill)), [style.fillOpacity]) + ")";
        stroke = !style.strokeOpacity ? stroke : "rgba(" + [].concat(_toConsumableArray((0, _SvgHelper.hexToRgb)(stroke)), [style.strokeOpacity]) + ")";
        context.setTransform(1, 0, 0, 1, _this2.props.margin.left, _this2.props.margin.top);
        context.translate.apply(context, _toConsumableArray(_this2.props.position));
        context.translate(piece.tx, piece.ty);
        context.fillStyle = fill;
        context.strokeStyle = stroke;
        context.lineWidth = style.strokeWidth ? style.strokeWidth : "black";

        if (piece.markProps.markType === "circle" || piece.markProps.markType === "rect" && piece.markProps.rx > 0) {
          var vizX = 0,
              vizY = 0,
              r = piece.markProps.r;
          if (piece.markProps.width) {
            var halfWidth = piece.markProps.width / 2;
            vizX = piece.markProps.x + halfWidth;
            vizY = piece.markProps.y + halfWidth;
            r = halfWidth;
          }
          context.beginPath();
          context.arc(vizX, vizY, r, 0, 2 * Math.PI);
          context.fill();
          context.stroke();
        } else if (piece.markProps.markType === "rect") {
          context.fillRect(piece.markProps.x, piece.markProps.y, piece.markProps.width, piece.markProps.height);
          context.strokeRect(piece.markProps.x, piece.markProps.y, piece.markProps.width, piece.markProps.height);
        } else if (piece.markProps.markType === "path") {
          var p = new Path2D(piece.markProps.d);
          context.stroke(p);
          context.fill(p);
        } else {
          console.error("CURRENTLY UNSUPPORTED MARKTYPE FOR CANVAS RENDERING");
        }
      });
      context.setTransform(1, 0, 0, 1, 0, 0);

      if (this.props.canvasPostProcess === "chuckClose") {
        (0, _basicCanvasEffects.chuckCloseCanvasTransform)(this.props.canvasContext, context, size);
      } else if (typeof this.props.canvasPostProcess === "function") {
        this.props.canvasPostProcess(this.props.canvasContext, context, size);
      }
    }
  }, {
    key: "updateVisualizationLayer",
    value: function updateVisualizationLayer(props) {
      var xScale = props.xScale,
          yScale = props.yScale,
          dataVersion = props.dataVersion,
          projectedCoordinateNames = props.projectedCoordinateNames,
          renderKeyFn = props.renderKeyFn,
          _props$renderPipeline = props.renderPipeline,
          renderPipeline = _props$renderPipeline === undefined ? {} : _props$renderPipeline,
          _props$baseMarkProps = props.baseMarkProps,
          baseMarkProps = _props$baseMarkProps === undefined ? {} : _props$baseMarkProps;

      this.canvasDrawing = [];
      var canvasDrawing = this.canvasDrawing;

      var renderedElements = [];
      Object.keys(renderPipeline).forEach(function (k) {
        var pipe = renderPipeline[k];
        if (pipe.data && _typeof(pipe.data) === "object" && !Array.isArray(pipe.data) || pipe.data && pipe.data.length > 0) {
          var renderedPipe = pipe.behavior(_extends({
            xScale: xScale,
            yScale: yScale,
            canvasDrawing: canvasDrawing,
            projectedCoordinateNames: projectedCoordinateNames,
            renderKeyFn: renderKeyFn,
            baseMarkProps: baseMarkProps
          }, pipe));

          if (renderedPipe && renderedPipe.length > 0) {
            renderedElements.push(_react2.default.createElement(
              "g",
              { key: k, className: k },
              renderedPipe
            ));
          }
        }
      });

      this.setState({
        renderedElements: renderedElements,
        dataVersion: dataVersion
      });
    }
  }, {
    key: "componentWillMount",
    value: function componentWillMount() {
      this.updateVisualizationLayer(this.props);
    }
  }, {
    key: "componentWillReceiveProps",
    value: function componentWillReceiveProps(np) {
      var lp = this.props;
      var propKeys = Object.keys(np);

      var update = false;
      propKeys.forEach(function (key) {
        if (lp[key] !== np[key]) {
          update = true;
        }
      });

      if (update === true || np.dataVersion && np.dataVersion !== this.state.dataVersion) {
        this.updateVisualizationLayer(np);
      }
    }
  }, {
    key: "render",
    value: function render() {
      var props = this.props;
      var matte = props.matte,
          matteClip = props.matteClip,
          axes = props.axes,
          axesTickLines = props.axesTickLines,
          frameKey = props.frameKey,
          margin = props.margin;
      var renderedElements = this.state.renderedElements;


      var renderedAxes = axes && _react2.default.createElement(
        "g",
        { key: "visualization-axis-labels", className: "axis axis-labels" },
        axes
      );
      var renderedAxesTickLines = axesTickLines && _react2.default.createElement(
        "g",
        { key: "visualization-tick-lines", className: "axis axis-tick-lines" },
        axesTickLines
      );
      var renderedDataVisualization = (renderedAxes || renderedAxesTickLines || renderedElements && renderedElements.length > 0) && _react2.default.createElement(
        "g",
        {
          className: "data-visualization",
          key: "visualization-clip-path",
          clipPath: matteClip && matte ? "url(#matte-clip" + frameKey + ")" : undefined,
          transform: "translate(" + margin.left + "," + margin.top + ")"
        },
        renderedAxesTickLines,
        renderedElements,
        matte,
        renderedAxes
      ) || null;

      return renderedDataVisualization;
    }
  }]);

  return VisualizationLayer;
}(_react2.default.PureComponent), _class.defaultProps = {
  position: [0, 0],
  margin: { left: 0, top: 0, right: 0, bottom: 0 }
}, _temp);


VisualizationLayer.propTypes = {
  axes: _propTypes2.default.oneOfType([_propTypes2.default.array, _propTypes2.default.object]),
  frameKey: _propTypes2.default.string,
  xScale: _propTypes2.default.func,
  yScale: _propTypes2.default.func,
  pointData: _propTypes2.default.array,
  lineData: _propTypes2.default.array,
  areaData: _propTypes2.default.array,
  dataVersion: _propTypes2.default.string,
  canvasContext: _propTypes2.default.object,
  size: _propTypes2.default.array.isRequired,
  margin: _propTypes2.default.object
};

exports.default = VisualizationLayer;
module.exports = exports['default'];