'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SparkSmartFrame = exports.SparkNetworkFrame = exports.SparkOrdinalFrame = exports.SparkXYFrame = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _XYFrame = require('./XYFrame');

var _XYFrame2 = _interopRequireDefault(_XYFrame);

var _OrdinalFrame = require('./OrdinalFrame');

var _OrdinalFrame2 = _interopRequireDefault(_OrdinalFrame);

var _NetworkFrame = require('./NetworkFrame');

var _NetworkFrame2 = _interopRequireDefault(_NetworkFrame);

var _SmartFrame = require('./SmartFrame');

var _SmartFrame2 = _interopRequireDefault(_SmartFrame);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function sparkNetworkSettings() {
  var originalSettings = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'force';

  var finalSettings = {};
  if (originalSettings) {
    finalSettings = originalSettings;
    if (originalSettings === 'force') finalSettings = { type: 'force' };

    return _extends({
      edgeStrength: 2,
      edgeDistance: 5,
      nodePadding: 1,
      nodeWidth: 5,
      groupWidth: 4
    }, finalSettings);
  }
  return originalSettings;
}

var axisDefaults = {
  tickFormat: function tickFormat() {
    return '';
  },
  baseline: false
};

var allFrameDefaults = {
  margin: 0
};

function simpleValueAccessor(props, d) {
  var value = d.y;
  if (props.yAccessor) value = typeof props.yAccessor === 'string' ? d[props.yAccessor] : props.yAccessor(d);

  return value.toString ? value.toString() : value;
}

var xyFrameDefaults = function xyFrameDefaults(props) {
  return _extends({}, allFrameDefaults, props, {
    hoverAnnotation: props.hoverAnnotation === true ? [function (d) {
      return {
        type: 'react-annotation',
        label: simpleValueAccessor(props, d),
        dx: 50,
        dy: -50
      };
    }] : props.hoverAnnotation,
    axes: props.axes ? props.axes.map(function (a) {
      return _extends({}, axisDefaults, a);
    }) : props.axes
  });
};

var ordinalFrameDefaults = function ordinalFrameDefaults(props) {
  return _extends({}, allFrameDefaults, props, {
    //  hoverAnnotation: props.hoverAnnotation === true ? [{ type: "react-annotation"}] : props.hoverAnnotation,
    axis: props.axis ? _extends({ axisDefaults: axisDefaults }, props.axis) : props.axis
  });
};

var networkFrameDefaults = function networkFrameDefaults(props) {
  return _extends({}, allFrameDefaults, {
    nodeSizeAccessor: 2
  }, props, {
    networkType: sparkNetworkSettings(props.networkType)
    //  hoverAnnotation: props.hoverAnnotation === true ? [{ type: "react-annotation"}] : props.hoverAnnotation,
  });
};

var createSparkFrame = function createSparkFrame(Frame, defaults) {
  var _class, _temp;

  return _temp = _class = function (_React$Component) {
    _inherits(SparkFrame, _React$Component);

    function SparkFrame(props) {
      _classCallCheck(this, SparkFrame);

      var _this = _possibleConstructorReturn(this, (SparkFrame.__proto__ || Object.getPrototypeOf(SparkFrame)).call(this, props));

      _this._onResize = function (width, height) {
        _this.setState({ containerHeight: height, containerWidth: width });
      };

      _this.state = {
        containerHeight: props.size[1],
        containerWidth: props.size[0]
      };
      return _this;
    }

    _createClass(SparkFrame, [{
      key: 'componentDidMount',
      value: function componentDidMount() {
        var element = this.node;
        var lineHeight = +window.getComputedStyle(element).lineHeight.split('px')[0] - 5;

        this.setState({
          containerHeight: isNaN(lineHeight) ? element.offsetHeight : lineHeight,
          containerWidth: element.offsetWidth
        });
      }
    }, {
      key: 'render',
      value: function render() {
        var _this2 = this;

        var _props = this.props,
            size = _props.size,
            _props$style = _props.style,
            style = _props$style === undefined ? {} : _props$style;
        var _state$containerHeigh = this.state.containerHeight,
            containerHeight = _state$containerHeigh === undefined ? 30 : _state$containerHeigh;


        var actualSize = [];

        actualSize[0] = typeof size === 'number' ? size : size[0] ? size[0] : containerHeight;
        actualSize[1] = containerHeight;

        return _react2.default.createElement(
          'span',
          {
            style: _extends({
              width: actualSize[0] + 'px',
              height: actualSize[1] + 'px',
              display: 'inline-block',
              marginLeft: '5px',
              marginRight: '5px'
            }, style),
            ref: function ref(node) {
              return _this2.node = node;
            }
          },
          _react2.default.createElement(Frame, _extends({}, defaults(this.props), { size: actualSize, useSpans: true }))
        );
      }
    }]);

    return SparkFrame;
  }(_react2.default.Component), _class.propTypes = {
    size: _propTypes2.default.array
  }, _class.defaultProps = {
    size: []
  }, _temp;
};

var SparkXYFrame = exports.SparkXYFrame = createSparkFrame(_XYFrame2.default, xyFrameDefaults);
var SparkOrdinalFrame = exports.SparkOrdinalFrame = createSparkFrame(_OrdinalFrame2.default, ordinalFrameDefaults);
var SparkNetworkFrame = exports.SparkNetworkFrame = createSparkFrame(_NetworkFrame2.default, networkFrameDefaults);
var SparkSmartFrame = exports.SparkSmartFrame = createSparkFrame(_SmartFrame2.default, {});