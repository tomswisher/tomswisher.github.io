"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.renderLaidOutPieces = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

exports.pointOnArcAtAngle = pointOnArcAtAngle;

var _react = require("react");

var _react2 = _interopRequireDefault(_react);

var _semioticMark = require("semiotic-mark");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function pointOnArcAtAngle(center, angle, distance) {
  var radians = Math.PI * (angle + 0.75) * 2;

  var xPosition = center[0] + distance * Math.cos(radians);
  var yPosition = center[1] + distance * Math.sin(radians);

  return [xPosition, yPosition];
}

var renderLaidOutPieces = exports.renderLaidOutPieces = function renderLaidOutPieces(_ref) {
  var data = _ref.data,
      shouldRender = _ref.shouldRender,
      canvasRender = _ref.canvasRender,
      canvasDrawing = _ref.canvasDrawing,
      styleFn = _ref.styleFn,
      classFn = _ref.classFn,
      baseMarkProps = _ref.baseMarkProps,
      renderKeyFn = _ref.renderKeyFn;

  if (!shouldRender) return null;
  var renderedPieces = [];
  data.forEach(function (d, i) {
    if (canvasRender && canvasRender(d) === true) {
      var canvasPiece = {
        baseClass: "orframe-piece",
        tx: d.renderElement.tx || 0,
        ty: d.renderElement.ty || 0,
        d: d.piece,
        i: i,
        markProps: d.renderElement || d,
        styleFn: styleFn,
        classFn: classFn
      };
      canvasDrawing.push(canvasPiece);
    } else {
      if (_react2.default.isValidElement(d.renderElement || d)) {
        renderedPieces.push(d.renderElement || d);
      } else {
        renderedPieces.push(_react2.default.createElement(_semioticMark.Mark, _extends({}, baseMarkProps, {
          key: renderKeyFn ? renderKeyFn(d.piece) : d.renderKey || "piece-render-" + i
        }, d.renderElement || d)));
      }
    }
  });

  return renderedPieces;
};