"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require("react");

var _react2 = _interopRequireDefault(_react);

var _annotationHandling = require("./annotationLayerBehavior/annotationHandling");

var _propTypes = require("prop-types");

var _propTypes2 = _interopRequireDefault(_propTypes);

var _Legend = require("./Legend");

var _Legend2 = _interopRequireDefault(_Legend);

var _Annotation = require("./Annotation");

var _Annotation2 = _interopRequireDefault(_Annotation);

var _labella = require("labella");

var _labella2 = _interopRequireDefault(_labella);

var _SpanOrDiv = require("./SpanOrDiv");

var _SpanOrDiv2 = _interopRequireDefault(_SpanOrDiv);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } // modules

//import { load } from 'opentype.js'


function adjustedAnnotationKeyMapper(d) {
  return d.props.noteData.id || d.props.noteData.x + "-" + d.props.noteData.y;
}

function noteDataWidth(noteData) {
  var charWidth = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 8;

  var wrap = noteData.note && noteData.note.wrap || 120;
  var noteText = noteData.note.label || noteData.note.label || "";
  return Math.min(wrap, noteText.length * charWidth);
}

function noteDataHeight(noteData) {
  var charWidth = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 8;
  var lineHeight = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 20;

  var wrap = noteData.note && noteData.note.wrap || 120;
  var text = noteData.note.label || noteData.note.title || "";
  return Math.ceil(text.length * charWidth / wrap) * lineHeight + (noteData.note.label && noteData.note.title ? lineHeight : 0);
}

function objectStringKey(object) {
  var finalKey = "";
  Object.keys(object).forEach(function (key) {
    finalKey += !object[key] || !object[key].toString ? object[key] : object[key].toString();
  });

  return finalKey;
}

var AnnotationLayer = function (_React$Component) {
  _inherits(AnnotationLayer, _React$Component);

  function AnnotationLayer(props) {
    _classCallCheck(this, AnnotationLayer);

    var _this = _possibleConstructorReturn(this, (AnnotationLayer.__proto__ || Object.getPrototypeOf(AnnotationLayer)).call(this, props));

    _this.generateSVGAnnotations = _this.generateSVGAnnotations.bind(_this);
    _this.generateHTMLAnnotations = _this.generateHTMLAnnotations.bind(_this);

    _this.state = {
      font: undefined,
      svgAnnotations: [],
      htmlAnnotations: [],
      adjustedAnnotations: 0,
      adjustedAnnotationsKey: "",
      adjustedAnnotationsDataVersion: ""
    };
    return _this;
  }

  /*    componentWillMount() {
      const fontLocation = this.props.fontLocation
       if (fontLocation) {
        load(fontLocation, function(err, font) {
            if (err) {
                return null
            } else {
                this.setState({ font });
            }
        });
      }
    } */

  _createClass(AnnotationLayer, [{
    key: "generateSVGAnnotations",
    value: function generateSVGAnnotations(props, annotations) {
      var renderedAnnotations = annotations.map(function (d, i) {
        return props.svgAnnotationRule(d, i, props);
      }).filter(function (d) {
        return d !== null && d !== undefined;
      });

      return renderedAnnotations;
    }
  }, {
    key: "generateHTMLAnnotations",
    value: function generateHTMLAnnotations(props, annotations) {
      var renderedAnnotations = annotations.map(function (d, i) {
        return props.htmlAnnotationRule(d, i, props);
      }).filter(function (d) {
        return d !== null && d !== undefined;
      });

      return renderedAnnotations;
    }
  }, {
    key: "processAnnotations",
    value: function processAnnotations(adjustableAnnotations, annotationProcessor, props) {
      if (annotationProcessor.type === false) {
        return adjustableAnnotations;
      }

      var _props$margin = props.margin,
          margin = _props$margin === undefined ? { top: 0, bottom: 0, left: 0, right: 0 } : _props$margin;
      var size = props.size,
          axes = props.axes;


      margin = typeof margin === "number" ? { top: margin, left: margin, right: margin, bottom: margin } : margin;

      var _annotationProcessor$ = annotationProcessor.padding,
          padding = _annotationProcessor$ === undefined ? 2 : _annotationProcessor$;


      if (annotationProcessor.type === "bump") {
        var adjustedAnnotations = (0, _annotationHandling.bumpAnnotations)(adjustableAnnotations, props, annotationProcessor);
        return adjustedAnnotations;
      } else if (annotationProcessor.type === "marginalia") {
        var marginOffset = annotationProcessor.marginOffset;

        var finalOrientation = !annotationProcessor.orient || annotationProcessor.orient === "nearest" ? ["left", "right", "top", "bottom"] : Array.isArray(annotationProcessor.orient) ? annotationProcessor.orient : [annotationProcessor.orient];
        var marginOffsetFn = function marginOffsetFn(orient, axisSettings) {
          if (axisSettings.find(function (d) {
            return d.props.orient === orient;
          })) {
            return 50;
          }
          return 10;
        };
        if (typeof marginOffset === "number") {
          marginOffsetFn = function marginOffsetFn() {
            return marginOffset;
          };
        }

        var leftOn = finalOrientation.find(function (d) {
          return d === "left";
        });
        var rightOn = finalOrientation.find(function (d) {
          return d === "right";
        });
        var topOn = finalOrientation.find(function (d) {
          return d === "top";
        });
        var bottomOn = finalOrientation.find(function (d) {
          return d === "bottom";
        });

        var leftNodes = [];
        var rightNodes = [];
        var topNodes = [];
        var bottomNodes = [];

        adjustableAnnotations.forEach(function (aNote) {
          var noteData = aNote.props.noteData;
          var leftDist = leftOn ? noteData.x : Infinity;
          var rightDist = rightOn ? size[0] - noteData.x : Infinity;
          var topDist = topOn ? noteData.y : Infinity;
          var bottomDist = bottomOn ? size[1] - noteData.y : Infinity;

          var minDist = Math.min(leftDist, rightDist, topDist, bottomDist);

          if (leftDist === minDist) {
            leftNodes.push(aNote);
          } else if (rightDist === minDist) {
            rightNodes.push(aNote);
          } else if (topDist === minDist) {
            topNodes.push(aNote);
          } else {
            bottomNodes.push(aNote);
          }
        });

        //Adjust the margins based on which regions are active

        var leftForce = new _labella2.default.Force({
          minPos: 0 - margin.top,
          maxPos: bottomOn ? size[1] : size[1] + margin.bottom
        }).nodes(leftNodes.map(function (d) {
          return new _labella2.default.Node(d.props.noteData.y, noteDataHeight(d.props.noteData, annotationProcessor.characterWidth, annotationProcessor.lineHeight) + padding);
        })).compute();

        var rightForce = new _labella2.default.Force({
          minPos: topOn ? 0 : 0 - margin.top,
          maxPos: size[1] + margin.bottom
        }).nodes(rightNodes.map(function (d) {
          return new _labella2.default.Node(d.props.noteData.y, noteDataHeight(d.props.noteData, annotationProcessor.characterWidth, annotationProcessor.lineHeight) + padding);
        })).compute();

        var topForce = new _labella2.default.Force({
          minPos: leftOn ? 0 : 0 - margin.left,
          maxPos: size[0] + margin.right
        }).nodes(topNodes.map(function (d) {
          return new _labella2.default.Node(d.props.noteData.x, noteDataWidth(d.props.noteData, annotationProcessor.characterWidth) + padding);
        })).compute();

        var bottomForce = new _labella2.default.Force({
          minPos: 0 - margin.left,
          maxPos: rightOn ? size[0] : size[0] + margin.right
        }).nodes(bottomNodes.map(function (d) {
          return new _labella2.default.Node(d.props.noteData.x, noteDataWidth(d.props.noteData, annotationProcessor.characterWidth) + padding);
        })).compute();

        var bottomOffset = Math.max.apply(Math, _toConsumableArray(bottomNodes.map(function (d) {
          return noteDataHeight(d.props.noteData, annotationProcessor.characterWidth, annotationProcessor.lineHeight) + padding;
        })));
        var topOffset = Math.max.apply(Math, _toConsumableArray(topNodes.map(function (d) {
          return noteDataHeight(d.props.noteData, annotationProcessor.characterWidth, annotationProcessor.lineHeight) + padding;
        })));
        var leftOffset = Math.max.apply(Math, _toConsumableArray(leftNodes.map(function (d) {
          return noteDataWidth(d.props.noteData, annotationProcessor.characterWidth) + padding;
        })));
        var rightOffset = Math.max.apply(Math, _toConsumableArray(rightNodes.map(function (d) {
          return noteDataWidth(d.props.noteData, annotationProcessor.characterWidth) + padding;
        })));

        //      const nodeOffsetHeight = Math.max()

        var leftSortedNodes = leftForce.nodes();
        var rightSortedNodes = rightForce.nodes();
        var topSortedNodes = topForce.nodes();
        var bottomSortedNodes = bottomForce.nodes();

        leftNodes.forEach(function (note, i) {
          note.props.noteData.ny = leftSortedNodes[i].currentPos;
          note.props.noteData.nx = 0 - leftSortedNodes[i].layerIndex * leftOffset - marginOffsetFn("left", axes);
          if (note.props.noteData.note) {
            note.props.noteData.note.orientation = "leftRight";
            note.props.noteData.note.align = "right";
          }
        });

        rightNodes.forEach(function (note, i) {
          note.props.noteData.ny = rightSortedNodes[i].currentPos;
          note.props.noteData.nx = size[0] + rightSortedNodes[i].layerIndex * rightOffset + marginOffsetFn("right", axes);
          if (note.props.noteData.note) {
            note.props.noteData.note.orientation = "leftRight";
            note.props.noteData.note.align = "left";
          }
        });

        topNodes.forEach(function (note, i) {
          note.props.noteData.nx = topSortedNodes[i].currentPos;
          note.props.noteData.ny = 0 - topSortedNodes[i].layerIndex * topOffset - marginOffsetFn("top", axes);
        });

        bottomNodes.forEach(function (note, i) {
          note.props.noteData.nx = bottomSortedNodes[i].currentPos;
          note.props.noteData.ny = size[1] + bottomSortedNodes[i].layerIndex * bottomOffset + marginOffsetFn("bottom", axes);
        });
        return adjustableAnnotations;
      }
      return adjustableAnnotations;
      console.error("Unknown annotation handling function: Must be of a string 'bump' or 'marginalia' or a an object with type of those strings or a function that takes adjustable annotations and returns adjusted annotations");
    }
  }, {
    key: "createAnnotations",
    value: function createAnnotations(props) {
      var renderedSVGAnnotations = this.state.svgAnnotations,
          renderedHTMLAnnotations = [],
          adjustedAnnotations = this.state.adjustedAnnotations,
          adjustableAnnotationsKey = this.state.adjustedAnnotationsKey;

      var adjustedAnnotationsKey = this.state.adjustedAnnotationsKey,
          adjustedAnnotationsDataVersion = this.state.adjustedAnnotationsDataVersion;

      var annotations = props.annotations,
          _props$annotationHand = props.annotationHandling,
          annotationHandling = _props$annotationHand === undefined ? false : _props$annotationHand;

      var annotationProcessor = (typeof annotationHandling === "undefined" ? "undefined" : _typeof(annotationHandling)) !== "object" ? { type: annotationHandling } : annotationHandling;

      var _annotationProcessor$2 = annotationProcessor.dataVersion,
          dataVersion = _annotationProcessor$2 === undefined ? "" : _annotationProcessor$2;


      if (this.props.svgAnnotationRule) {
        var initialSVGAnnotations = this.generateSVGAnnotations(props, annotations);
        var adjustableAnnotations = initialSVGAnnotations.filter(function (d) {
          return d.props && d.props.noteData && !d.props.noteData.fixedPosition;
        });
        var fixedAnnotations = initialSVGAnnotations.filter(function (d) {
          return !d.props || !d.props.noteData || d.props.noteData.fixedPosition;
        });
        adjustableAnnotationsKey = adjustableAnnotations.map(adjustedAnnotationKeyMapper).join(",") + objectStringKey(_extends(annotationProcessor, {
          point: props.pointSizeFunction,
          label: props.labelSizeFunction
        }));

        if (annotationProcessor.type === false) {
          adjustedAnnotations = adjustableAnnotations;
        }

        if (adjustedAnnotations.length !== adjustableAnnotations.length || adjustedAnnotationsKey !== adjustableAnnotationsKey || adjustedAnnotationsDataVersion !== dataVersion) {
          adjustedAnnotations = this.processAnnotations(adjustableAnnotations, annotationProcessor, props);
        } else {
          //Handle when style or other attributes change
          adjustedAnnotations = adjustedAnnotations.map(function (d, i) {
            var newNoteData = _extends(adjustableAnnotations[i].props.noteData, {
              nx: d.props.noteData.nx,
              ny: d.props.noteData.ny,
              note: d.props.noteData.note
            });
            return _react2.default.createElement(_Annotation2.default, { key: d.key, noteData: newNoteData });
          });
        }

        renderedSVGAnnotations = [].concat(_toConsumableArray(adjustedAnnotations), _toConsumableArray(fixedAnnotations));
      }

      if (this.props.htmlAnnotationRule) {
        renderedHTMLAnnotations = this.generateHTMLAnnotations(props, annotations);
      }

      this.setState({
        svgAnnotations: renderedSVGAnnotations,
        htmlAnnotations: renderedHTMLAnnotations,
        adjustedAnnotations: adjustedAnnotations,
        adjustedAnnotationsKey: adjustableAnnotationsKey,
        adjustedAnnotationsDataVersion: dataVersion
      });
    }
  }, {
    key: "componentWillMount",
    value: function componentWillMount() {
      this.createAnnotations(this.props);
    }
  }, {
    key: "componentWillReceiveProps",
    value: function componentWillReceiveProps(nextProps) {
      this.createAnnotations(nextProps);
    }
  }, {
    key: "render",
    value: function render() {
      var _state = this.state,
          svgAnnotations = _state.svgAnnotations,
          htmlAnnotations = _state.htmlAnnotations;
      var _props = this.props,
          useSpans = _props.useSpans,
          legendSettings = _props.legendSettings,
          margin = _props.margin;


      var renderedLegend = void 0;
      if (legendSettings) {
        var positionHash = {
          left: [15, 15],
          right: [this.props.size[0] + 15, 15]
        };
        var _legendSettings$posit = legendSettings.position,
            position = _legendSettings$posit === undefined ? "right" : _legendSettings$posit,
            _legendSettings$title = legendSettings.title,
            title = _legendSettings$title === undefined ? "Legend" : _legendSettings$title;

        var legendPosition = positionHash[position] || position;
        renderedLegend = _react2.default.createElement(
          "g",
          { transform: "translate(" + legendPosition + ")" },
          _react2.default.createElement(_Legend2.default, _extends({}, legendSettings, { title: title, position: position }))
        );
      }
      var svgStyle = {
        background: "none",
        pointerEvents: "none",
        position: "absolute",
        left: margin.left + "px",
        top: margin.top + "px"
        //    if (useSpans) {
      };svgStyle.overflow = "visible";
      //    }

      return _react2.default.createElement(
        _SpanOrDiv2.default,
        {
          span: useSpans,
          className: "annotation-layer",
          style: {
            position: "absolute",
            pointerEvents: "none",
            background: "none"
          }
        },
        _react2.default.createElement(
          "svg",
          {
            className: "annotation-layer-svg",
            height: this.props.size[1],
            width: this.props.size[0],
            style: svgStyle
          },
          _react2.default.createElement(
            "g",
            null,
            renderedLegend,
            svgAnnotations
          )
        ),
        useSpans ? null : _react2.default.createElement(
          "div",
          {
            className: "annotation-layer-html",
            style: {
              background: "none",
              pointerEvents: "none",
              position: "absolute",
              height: this.props.size[1] + "px",
              width: this.props.size[0] + "px",
              left: margin.left + "px",
              top: margin.top + "px"
            }
          },
          htmlAnnotations
        )
      );
    }
  }]);

  return AnnotationLayer;
}(_react2.default.Component);

AnnotationLayer.propTypes = {
  scale: _propTypes2.default.func,
  orient: _propTypes2.default.string,
  title: _propTypes2.default.string,
  format: _propTypes2.default.string,
  values: _propTypes2.default.array,
  properties: _propTypes2.default.object,
  position: _propTypes2.default.array
};

exports.default = AnnotationLayer;
module.exports = exports['default'];